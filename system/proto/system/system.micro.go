// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/system/system.proto

package go_micro_srv_system

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for System service

type SystemService interface {
	GetSysStatus(ctx context.Context, in *Request, opts ...client.CallOption) (*SysResponse, error)
	WriteConf(ctx context.Context, in *ConfRequest, opts ...client.CallOption) (*Response, error)
}

type systemService struct {
	c    client.Client
	name string
}

func NewSystemService(name string, c client.Client) SystemService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.system"
	}
	return &systemService{
		c:    c,
		name: name,
	}
}

func (c *systemService) GetSysStatus(ctx context.Context, in *Request, opts ...client.CallOption) (*SysResponse, error) {
	req := c.c.NewRequest(c.name, "System.GetSysStatus", in)
	out := new(SysResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemService) WriteConf(ctx context.Context, in *ConfRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "System.WriteConf", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for System service

type SystemHandler interface {
	GetSysStatus(context.Context, *Request, *SysResponse) error
	WriteConf(context.Context, *ConfRequest, *Response) error
}

func RegisterSystemHandler(s server.Server, hdlr SystemHandler, opts ...server.HandlerOption) error {
	type system interface {
		GetSysStatus(ctx context.Context, in *Request, out *SysResponse) error
		WriteConf(ctx context.Context, in *ConfRequest, out *Response) error
	}
	type System struct {
		system
	}
	h := &systemHandler{hdlr}
	return s.Handle(s.NewHandler(&System{h}, opts...))
}

type systemHandler struct {
	SystemHandler
}

func (h *systemHandler) GetSysStatus(ctx context.Context, in *Request, out *SysResponse) error {
	return h.SystemHandler.GetSysStatus(ctx, in, out)
}

func (h *systemHandler) WriteConf(ctx context.Context, in *ConfRequest, out *Response) error {
	return h.SystemHandler.WriteConf(ctx, in, out)
}
